#include <iostream>
using namespace std;

// Estrutura de um nó da árvore AVL
struct Node {
    int key;
    Node *left;
    Node *right;
    int height;
};

// Função para obter a altura de um nó
int height(Node *N) {
    if (N == nullptr)
        return 0;
    return N->height;
}

// Função para criar um novo nó
Node* newNode(int key) {
    Node* node = new Node();
    node->key = key;
    node->left = nullptr;
    node->right = nullptr;
    node->height = 1;  // Novo nó é adicionado na folha
    return node;
}

// Função para rotacionar à direita a subárvore com raiz no nó y
Node* rightRotate(Node *y) {
    Node *x = y->left;
    Node *T2 = x->right;

    // Rotação
    x->right = y;
    y->left = T2;

    // Atualizar alturas
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    // Retornar a nova raiz
    return x;
}

// Função para rotacionar à esquerda a subárvore com raiz no nó x
Node* leftRotate(Node *x) {
    Node *y = x->right;
    Node *T2 = y->left;

    // Rotação
    y->left = x;
    x->right = T2;

    // Atualizar alturas
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    // Retornar a nova raiz
    return y;
}

// Função para obter o fator de balanceamento de um nó
int getBalance(Node *N) {
    if (N == nullptr)
        return 0;
    return height(N->left) - height(N->right);
}

// Função para inserir um nó na árvore AVL e balancear a árvore
Node* insert(Node* node, int key) {
    // 1. Realizar inserção normal em uma BST
    if (node == nullptr)
        return newNode(key);

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else  // Valores duplicados não são permitidos na árvore AVL
        return node;

    // 2. Atualizar a altura deste nó ancestral
    node->height = 1 + max(height(node->left), height(node->right));

    // 3. Obter o fator de balanceamento deste nó ancestral para verificar se ele se tornou desbalanceado
    int balance = getBalance(node);

    // Se o nó se tornou desbalanceado, há 4 casos:

    // Caso 1 - Desbalanceamento à esquerda (Left Left)
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);

    // Caso 2 - Desbalanceamento à direita (Right Right)
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);

    // Caso 3 - Desbalanceamento Esquerda-Direita (Left Right)
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    // Caso 4 - Desbalanceamento Direita-Esquerda (Right Left)
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    // Retornar o ponteiro do nó (inalterado) se não houve necessidade de balancear
    return node;
}

// Função para realizar busca em uma árvore AVL
Node* search(Node* root, int key) {
    // Caso base: a árvore está vazia ou o valor foi encontrado
    if (root == nullptr || root->key == key)
        return root;

    // Se o valor for menor que a chave da raiz, buscar na subárvore à esquerda
    if (key < root->key)
        return search(root->left, key);

    // Se o valor for maior que a chave da raiz, buscar na subárvore à direita
    return search(root->right, key);
}

// Função para imprimir a árvore em ordem
void inOrder(Node *root) {
    if (root != nullptr) {
        inOrder(root->left);
        cout << root->key << " ";
        inOrder(root->right);
    }
}

int main() {
    Node *root = nullptr;

    // Inserção de nós na árvore AVL
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 30);
    root = insert(root, 40);
    root = insert(root, 50);
    root = insert(root, 25);

    // Impressão da árvore em ordem
    cout << "Árvore AVL em ordem: ";
    inOrder(root);
    cout << endl;

    // Realizando a busca
    int key = 30;
    Node* result = search(root, key);
    if (result != nullptr)
        cout << "Elemento " << key << " encontrado na árvore." << endl;
    else
        cout << "Elemento " << key << " não encontrado na árvore." << endl;

    return 0;
}
